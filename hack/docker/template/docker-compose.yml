version: "3.5"

networks:
  # Create an explicit network so we can connect to it from the client to do deployments.
  # Create it externally so when we remove individual nodes it doesn't try to destroy it.
  casperlabs:
    external: true

# Cross mounting volumes: https://github.com/docker/compose/issues/3211
volumes:
  socketvolume: {}

# Base template for nodes. Can't use replicas unfortunately because we have to pair them
# with an execution engine. Alternatively we could build a single image.

services:
  # For repeating configs, we could use extension fields: https://medium.com/@kinghuang/docker-compose-anchors-aliases-extensions-a1e4105d70bd
  # or docker-compose.override.yml as described in https://docs.docker.com/compose/extends/

  # Not going to expose ports on the host because there will be many nodes.
  # We can use a docker container to run the client and connect to the right casperlabs network
  # and pick one particular node.

  node:
    image: casperlabs/node:${CL_VERSION}
    container_name: node-${NODE_NUMBER}
    hostname: node-${NODE_NUMBER}
    ports:
      # Port for deploys
      - 404${NODE_NUMBER}1:40401
      # Port for proposals
      - 404${NODE_NUMBER}2:40402
      # For now HTTP is exposed only from node-0 via the socat proxy in the common docker-compose.yml
    volumes:
      # Volume for a socket to be created and shared with the execution engine.
      - socketvolume:/root/.casperlabs/sockets
      # Common bonds file
      - $PWD/../.casperlabs/chainspec:/root/.casperlabs/chainspec
      # Bootstrap node IDs
      - $PWD/../.casperlabs/nodes:/root/.casperlabs/nodes
      # Node keys
      - $PWD/../.casperlabs/nodes/node-${NODE_NUMBER}:/root/.casperlabs/node
      - $PWD/../template/start-node.sh:/opt/docker/start-node.sh
      # Make logs available in JSON, stack traces are only available there.
      - $PWD/logs:/var/logs/casperlabs
    networks:
      - casperlabs
    environment:
      HOME: /root
      BOOTSTRAP_HOSTNAMES: ${BOOTSTRAP_HOSTNAMES}
      CL_GRPC_SOCKET: /root/.casperlabs/sockets/.casper-node.sock
      CL_SERVER_NO_UPNP: "true"
      CL_CASPER_VALIDATOR_PUBLIC_KEY_PATH: /root/.casperlabs/node/validator-public.pem
      CL_CASPER_VALIDATOR_PRIVATE_KEY_PATH: /root/.casperlabs/node/validator-private.pem
      CL_TLS_CERTIFICATE: /root/.casperlabs/node/node.certificate.pem
      CL_TLS_KEY: /root/.casperlabs/node/node.key.pem
      CL_TLS_API_CERTIFICATE: /root/.casperlabs/node/node.certificate.pem
      CL_TLS_API_KEY: /root/.casperlabs/node/node.key.pem
      CL_GRPC_USE_TLS: "false"
      CL_METRICS_PROMETHEUS: "true"
      CL_SERVER_ALIVE_PEERS_CACHE_EXPIRATION_PERIOD: 15second
      CL_SERVER_SHUTDOWN_TIMEOUT: 5second
      CL_LOG_JSON_PATH: /var/logs/casperlabs
    env_file:
      - .env
      - $PWD/../.casperlabs/chainspec/genesis/highway.env
    entrypoint:
      - sh
      - -c
      - chmod +x ./start-node.sh && ./start-node.sh
    depends_on:
      # Need the gRPC socket file to be created before we start the node.
      - execution-engine

  execution-engine:
    image: casperlabs/execution-engine:${CL_VERSION}
    container_name: execution-engine-${NODE_NUMBER}
    hostname: execution-engine-${NODE_NUMBER}
    volumes:
      - socketvolume:/opt/docker/.casperlabs/sockets
    networks:
      - casperlabs
    command:
      - .casperlabs/sockets/.casper-node.sock
