version: "3.5"

networks:
  casperlabs:
    external: true

services:
  # Metrics available at http://localhost:9090
  prometheus:
    image: prom/prometheus:v2.7.1
    container_name: prometheus
    volumes:
      - ${PWD}/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      # Mount the file which we'll keep refreshing any time nodes are created or removed.
      - ${PWD}/monitoring/prometheus/targets.yml:/etc/prometheus/targets.yml
    ports:
      - ${CL_PROMETHEUS_PORT}:9090
    networks:
      - casperlabs

  # Dashboard available at http://localhost:3000
  # login credentials are admin/admin
  grafana:
    image: grafana/grafana:5.4.3
    container_name: grafana
    volumes:
      # http://docs.grafana.org/v5.0/administration/provisioning/
      - ${PWD}/monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ${PWD}/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - ${CL_GRAFANA_PORT}:3000
    networks:
      - casperlabs

  # Expose ports from one of the containers to the host.
  # https://hub.docker.com/r/marcnuri/port-forward
  # https://hub.docker.com/r/alpine/socat
  proxy-node-http:
    image: alpine/socat
    container_name: proxy-node-http
    ports:
      - ${CL_SERVER_HTTP_PORT}:40403
    command: "tcp-listen:40403,fork,reuseaddr tcp-connect:node-0:40403"
    networks:
      - casperlabs


  # According to https://github.com/improbable-eng/grpc-web/issues/199
  # grpc/grpc-web has a client that works with envoy and
  # improbably-eng/grpc-web works with with grpcwebproxy
  # https://github.com/grpc/grpc-web#proxy-interoperability
  # https://github.com/improbable-eng/grpc-web/tree/master/go/grpcwebproxy
  grpcwebproxy:
    build:
      context: ./
      dockerfile: ./grpcwebproxy/Dockerfile
    image: casperlabs/grpcwebproxy:${CL_VERSION}
    container_name: grpcwebproxy
    ports:
      # This is just exposed for debug purposes. Access it through Nginx reverse proxy instead.
      - ${CL_EXPLORER_GRPC_PORT}:8080
    volumes:
      - ${PWD}/grpcwebproxy/certificate.pem:/etc/tls/certificate.pem
      - ${PWD}/grpcwebproxy/key.pem:/etc/tls/key.pem
    command:
      - /grpcwebproxy
      - --backend_addr=${CL_EXPLORER_BACKEND_HOST}:40401
      - --backend_tls=false
      - --backend_tls_noverify
      - --backend_max_call_recv_msg_size=16777216
      # Timeout for server-side streaming
      - --server_http_max_write_timeout=1h
      - --allow_all_origins
      - --server_tls_cert_file=/etc/tls/certificate.pem
      - --server_tls_key_file=/etc/tls/key.pem
    networks:
      - casperlabs

  # CasperLabs Explorer available at https://localhost:8443
  # The URL needs to be enabled in Auth0 for login/logout to work.
  explorer:
    image: casperlabs/explorer:${CL_VERSION}
    container_name: explorer
    networks:
      - casperlabs
    # Ports are not exposed, access it through nginx instead.
    volumes:
      # NOTE: This is using the faucet account already, so no need for giving funds to any account explicitly..
      - ${PWD}/keys/faucet-account/account-public.pem:/app/keys/public.key
      - ${PWD}/keys/faucet-account/account-private.pem:/app/keys/private.key
    environment:
      FAUCET_ACCOUNT_PUBLIC_KEY_PATH: /app/keys/public.key
      FAUCET_ACCOUNT_PRIVATE_KEY_PATH: /app/keys/private.key
      PAYMENT_AMOUNT: 10000000
      CASPER_SERVICE_URL: http://grpcwebproxy:8080
      SERVER_PORT: 8080
      # Not using TLS, Nginx does it.
      SERVER_USE_TLS: "false"
      # Ignore the fact that the grpcwebproxy cert is self-signed.
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      AUTH_MOCK_ENABLED: ${AUTH_MOCK_ENABLED-:false}

  # gRPC-Web and the Explorer available on the same port via nginx.
  nginx:
    image: nginx:1.17
    container_name: nginx
    ports:
      - ${CL_EXPLORER_HTTP_PORT}:8443
    volumes:
      - ${PWD}/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ${PWD}/grpcwebproxy/certificate.pem:/etc/nginx/tls/certificate.pem
      - ${PWD}/grpcwebproxy/key.pem:/etc/nginx/tls/key.pem
    networks:
      - casperlabs

  # stests workers
  stests:
    image: casperlabs/stests:latest
    container_name: stests
    environment:
      STESTS_HOME: /root/casperlabs/stests
      STESTS_PATH_ROOT: /root/.casperlabs-stests
      STESTS_BROKER_REDIS_HOST: redis
      STESTS_CACHE_REDIS_HOST: redis
      STESTS_MWARE_REDIS_HOST: redis
    volumes:
      - $PWD/stests/start-worker.sh:/root/casperlabs/start-worker.sh
    entrypoint:
      - sh
      - -c
      - chmod +x ./start-worker.sh && ./start-worker.sh
    networks:
      - casperlabs
    depends_on:
      - redis

  # Redis database required for stests.
  redis:
    image: redis:5.0
    container_name: redis
    networks:
      - casperlabs

  # Selenium for testing clarity
  selenium:
    image: selenium/standalone-chrome:3.141.59-xenon
    container_name: selenium
    networks:
      - casperlabs
    volumes:
      - /dev/shm:/dev/shm
    ports:
      - 4444:4444
