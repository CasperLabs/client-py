syntax = "proto3";
package io.casperlabs.casper.consensus.info;

import "io/casperlabs/casper/consensus/consensus.proto";

message BlockInfo {
    io.casperlabs.casper.consensus.BlockSummary summary = 1;
    Status status = 2;

    enum View {
        // Only includes information which is based on the header.
        BASIC = 0;
        // Includes extra information such as children which require extra lookups.
        FULL = 1;
    }

    message Status {
        reserved 1; // fault_tolerance;
        reserved 4; // is_finalized;
        Stats stats = 2;
        repeated bytes child_hashes = 3;

        // Indicate the finality status of the block, i.e. whether it's in the p-past cone
        // of the last finalized block. Doesn't apply to ballots, those never get finalized.
        Finality finality = 5;

        // Statistics derived from the full block.
        message Stats {
            uint32 block_size_bytes = 1;
            uint32 deploy_error_count = 2;
            uint64 deploy_cost_total = 3;
            // Average gas price across all deploys in the block weighted by the gas cost of the deploys.
            uint64 deploy_gas_price_avg = 4;
        }

        enum Finality {
            // The fate of the block hasn't been decided yet.
            UNDECIDED = 0;
            // The block has reached k=1 summit level and has appeared in the finalized block stream.
            FINALIZED = 1;
            // The block was bypassed by the Last Finalized Block without being finalized, i.e. it will never be finalized now.
            ORPHANED = 2;
        }
    }
}


message DeployInfo {
    io.casperlabs.casper.consensus.Deploy deploy = 1;
    // List of blocks the deploy has been processed in, with results, ordered by newest to oldest.
    repeated ProcessingResult processing_results = 2;
    Status status = 3;

    message ProcessingResult {
        BlockInfo block_info = 1;
        uint64 cost = 2;
        bool is_error = 3;
        string error_message = 4;
        uint32 stage = 5;
    }

    enum View {
        // Only includes the header of the deploys, not the body with the code.
        BASIC = 0;
        // Includes the body with the code.
        FULL = 1;
    }

    enum State {
        UNDEFINED = 0;
        // Waiting to be included in a block. Deploys can go back to pending
        // if the block it was included in got orphaned.
        PENDING = 1;
        // Included in one or more blocks, waiting to be finalized, or potentially
        // orphaned and re-queued.
        PROCESSED = 2;
        // The block the deploy was included has been finalized along with all the deploys in it.
        FINALIZED = 3;
        // Deploys get discarded if their account doesn't exist, or their TTL expires.
        // They will be removed after a grace period to free up space.
        DISCARDED = 4;
    }

    message Status {
        State state = 1;
        // Potential explanation for the current state of the deploy, e.g. the reason it got discarded.
        string message = 2;
    }
}

message Event {
    uint64 event_id = 9;
    oneof value {
        BlockAdded block_added = 1;
        NewFinalizedBlock new_finalized_block = 2;
        DeployAdded deploy_added = 3;
        DeployRequeued deploy_requeued = 4;
        DeployDiscarded deploy_discarded = 5;
        DeployProcessed deploy_processed = 6;
        DeployFinalized deploy_finalized = 7;
        DeployOrphaned deploy_orphaned = 8;
    }

    message BlockAdded {
        BlockInfo block = 1;
    }

    message NewFinalizedBlock {
        // Hash of the newly finalized block.
        bytes block_hash = 1;
        // Set of blocks that were finalized indirectly (secondary parents of the new main-chain LFB).
        repeated bytes indirectly_finalized_block_hashes = 2;
        // Set of blocks which are never going to be finalized now.
        repeated bytes indirectly_orphaned_block_hashes = 3;
    }

    // A deploy was added to the local buffer.
    message DeployAdded {
        io.casperlabs.casper.consensus.Deploy deploy = 1;
    }

    // A deploy was discarded from the local buffer either due to a pre-condition error or TTL expiration.
    message DeployDiscarded {
        io.casperlabs.casper.consensus.Deploy deploy = 1;
        string message = 2;
    }

    // A deploy has been requeued in the local buffer because none of the blocks it was included in are
    // in the p-past cone of the fork choice. Some of the existing blocks may become un-orphaned again if
    // the fork choice switches back to their branch.
    message DeployRequeued {
        io.casperlabs.casper.consensus.Deploy deploy = 1;
    }

    // A deploy was executed and included in a block.
    message DeployProcessed {
        bytes block_hash = 1;
        io.casperlabs.casper.consensus.Block.ProcessedDeploy processed_deploy = 2;
    }

    // A block the deploy was included in has been finalized. Every `DeployProcessed` event should
    // eventually end up being finalized or orphaned (anti-finalized).
    message DeployFinalized {
        // This block has been finalized directly or indirectly.
        bytes block_hash = 1;
        // This deploy cannot appear in the descendants of the finalized block as that would be a duplicate,
        // so these results are considered final.
        io.casperlabs.casper.consensus.Block.ProcessedDeploy processed_deploy = 2;
    }

    // A block the deploy was included in has been anti-finalized, i.e. orphaned by the LFB.
    // The deploy can still be finalized in a different block, if it was requeued or re-sent.
    message DeployOrphaned {
       // This block has been passed by the Last Finalized Block and will never be included in the main chain.
       bytes block_hash = 1;
       // Including the full `DeployInfo `with all the alternative processing results so we can see if there's another,
       // finalized block, or something else to wait for. Otherwise the client could pair up Processed and
       // Finalized/Anti-finalized events but if they miss something they'd most likely query the status of the deploy anyway.
       DeployInfo deploy_info = 2;
    }
}
