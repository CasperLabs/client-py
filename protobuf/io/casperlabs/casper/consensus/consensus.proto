syntax = "proto3";
package io.casperlabs.casper.consensus;

import "io/casperlabs/casper/consensus/state.proto";

// Signature over for example a deploy or a block. The location of the public key depends
// on the subject; for example if it's a block then the key is actually part of the data
// that needs to be signed over.
message Signature {
    // One of the supported algorithms: ed25519, secp256k1, secp256r1
    string sig_algorithm = 1;
    bytes sig = 2;
}

// A signature together with the corresponding public key that can be used to validate it
// for situations where the key is not part of the data being signed, which is usually the
// case where multiple signatures are required.
message Approval {
    bytes approver_public_key = 1;
    Signature signature = 2;
}

// A smart contract invocation, singed by the account that sent it.
message Deploy {
    // blake2b256 hash of the `header`.
    bytes deploy_hash = 1;
    Header header = 2;
    Body body = 3;

    // Signatures over `deploy_hash` with either the `account_public_key`, or some other keys in case of
    // multi-sig wallets and account recovery (when the private key corresponding to `account_public_key`
    // is lost.)
    repeated Approval approvals = 4;

    message Header {
        // Removed the nonce.
        reserved 2;
        // Identifying the Account is the key used to sign the Deploy.
        bytes account_public_key_hash = 1;
        // Current time milliseconds.
        uint64 timestamp = 3;
        // Conversion rate between the cost of Wasm opcodes and the motes sent by the `payment_code`.
        uint64 gas_price = 4;
        // Hash of the body structure as a whole.
        bytes body_hash = 5;
        // Time to live of the deploy, in milliseconds. A deploy can only be
        // included in a block between Header.timestamp and
        // Header.timestamp + Header.ttl_millis. A value of 0 is interpreted as
        // 'not present' and a default value will be assigned instead.
        uint32 ttl_millis = 6;
        // List of `Deploy.deploy_hash`s  that must be executed in past blocks
        // before this deploy can be executed.
        repeated bytes dependencies = 7;
        // If present, the deploy can only be included in a block on the right chain.
        // This can be used to preotect against accidental or malicious cross chain
        // deploys, in case the same account exists on multiple networks.
        string chain_name = 8;
    }

    message Body {
        // Wasm code of the smart contract to be executed.
        Code session = 1;
        // Wasm code that transfers some motes to the validators as payment in exchange to run the Deploy.
        // Note: the word "mote" means "a tiny piece of a substance". Here we are referring to the smallest,
        // indivisible unit of the CL token. This is the equivalent of a Satoshi on Bitcoin or a Wei on Ethereum.
        Code payment = 2;
    }

    // Code (either session or payment) to be deployed to the platform.
    // Includes both binary instructions (wasm) and optionally, arguments
    // to those instructions encoded via our ABI
    message Code {
        // XXX: For the JS serializer the order of fields matters.
        //      See https://casperlabs.atlassian.net/browse/TNET-45

        // Keyword arguments.
        repeated Arg args = 1;

        oneof contract {
            WasmContract wasm_contract = 2;
            StoredContract stored_contract = 3;
            StoredVersionedContract stored_versioned_contract = 4;
            TransferContract transfer_contract = 5;
        }

        message WasmContract {
            bytes wasm = 1;
        }

        message StoredVersionedContract {
            oneof address {
                // Package hash address of already stored contract.
                bytes package_hash = 1;
                // Name of a key that contains a package hash.
                string name = 2;
            }
            // Name of the entry method in the contract.
            string entry_point = 3;
            // Optionally specify the exact version; 0 means use the highest available.
            uint32 version = 4;
        }

        message StoredContract {
            oneof address {
                // Public hash address of an already stored contract.
                bytes contract_hash = 1;
                // Name of a stored contract associated with the executing account (uref or hash).
                string name = 2;
            }
            // Name of the entry method in the contract.
            string entry_point = 3;
        }

        // Built-in transfer, bypassing the WASM execution.
        message TransferContract {}
    }

    message Arg {
        reserved 2; // old state.Value representation of args
        string name = 1;
        state.CLValueInstance value = 3;
    }

    // Old definition of Arg, still kept around to support old JSON format.
    // TODO: delete this when there are no more usages of the old JSON format
    message LegacyArg {
        string name = 1;
        Value value = 2;
        message Value {
            oneof value {
                Value optional_value = 1;
                bytes bytes_value = 2;
                int32 int_value = 3;
                state.IntList int_list = 4;
                string string_value = 5;
                state.StringList string_list = 6;
                int64 long_value = 7;
                state.BigInt big_int = 8;
                state.Key key = 9;
            }
        }
    }
}

// Limited deploy information for gossiping.
message DeploySummary {
    // blake2b256 hash of the `header`.
    bytes deploy_hash = 1;
    Deploy.Header header = 2;
    // Signatures over `deploy_hash` with either the `account_public_key`, or some other keys in case of
    // multi-sig wallets and account recovery (when the private key corresponding to `account_public_key`
    // is lost.)
    repeated Approval approvals = 3;
}

// Limited block information for gossiping.
message BlockSummary {
    // blake2b256 hash of the `header`.
    bytes block_hash = 1;
    Block.Header header = 2;
    // Signature over `block_hash` using `validator_public_key`.
    Signature signature = 3;
}

// Full block information.
message Block {
    // blake2b256 hash of the `header`.
    bytes block_hash = 1;
    Header header = 2;
    Body body = 3;
    // Signature over `block_hash`.
    Signature signature = 4;

    message Header {
        reserved 6; // old u64 protocol version.
        repeated bytes parent_hashes = 1;
        repeated Justification justifications = 2;
        GlobalState state = 3;
        // Hash of the body structure as a whole.
        bytes body_hash = 4;
        // Unix timestamp from when the block was created.
        uint64 timestamp = 5;
        state.ProtocolVersion protocol_version = 13;
        uint32 deploy_count = 7;
        string chain_name = 8;
        uint32 validator_block_seq_num = 9;
        bytes validator_public_key = 10;
        bytes validator_public_key_hash = 20;
        // The hash of the previous block (or ballot) from this validator.
        // It has to be stated even if it's part of the justifications directly,
        // and it must be part of the j-past-cone of the block, in case transitive
        // justifications are omitted. It must be the one corresponding to
        // validator_block_seq_num - 1.
        bytes validator_prev_block_hash = 14;
        // Distance from Genesis.
        // This is a rank based on the justifications of the message.
        uint64 j_rank = 11;
        MessageType message_type = 12;
        MessageRole message_role = 19;
        // A block from where the fork choice is calculated.
        // Corresponds to the era the block belongs to.
        bytes key_block_hash = 15;
        // The round ID (the idealistic protocol timestamp) to which the block belongs;
        // this will be slightly different from the timestamp, which is the wall clock time
        // of when the block was _actually_ created.
        uint64 round_id = 16;
        // A random bit set by the creator of the block which is goes towards the leader seed
        // of the era. Only leader blocks (i.e. lambda messages) have to set it; should be
        // empty for ballots.
        bool magic_bit = 17;
        // Block height.
        // Different from `j_rank` because it's incremented along main tree in the DAG, based on the parents.
        uint64 main_rank = 18;
    }

    enum MessageType {
        // Regular block (with deploys, multiple parents etc).
        BLOCK  = 0;
        // A message that doesn't have any deploys,
        // targets one block (no secondary parents),
        // and cannot be used as a parent (is a leaf in the DAG).
        BALLOT = 1;
    }

    // Highway specific role of a message.
    enum MessageRole {
        UNDEFINED = 0;
        // Message from the round leader; a.k.a. lambda-message. Can be a block or ballot (during the voting period).
        PROPOSAL = 1;
        // Message in response to leader messages, with no other justification except the validator's own last message; a.k.a. lambda-response.
        CONFIRMATION = 2;
        // Message created during the round to form summits, a.k.a. omega-message.
        WITNESS = 3;
    }

    message Body {
        repeated ProcessedDeploy deploys = 1;
    }

    message Justification {
        bytes validator_public_key_hash = 1;
        bytes latest_block_hash = 2;
    }

    message ProcessedDeploy {
        Deploy deploy = 1;
        uint64 cost = 2;
        bool is_error = 3;
        string error_message = 4;
        // A group this deploy will be executed in.
        // Deploys with the same `stage` value will be executed in parallel.
        uint32 stage = 5;
    }

    message GlobalState {
        // May not correspond to a particular block if there are multiple parents.
        bytes pre_state_hash = 1;
        bytes post_state_hash = 2;
        // Included in header so lightweight nodes can follow the consensus.
        repeated Bond bonds = 3;
    }
}

message Bond {
    reserved 2; // Original bond was uint64.
    bytes validator_public_key_hash = 1;
    state.BigInt stake = 3;
}


// To allow nodes in the beginning to verify that they are joining the right network,
// while there is no DAG to look at, they disseminate approvals for the Genesis candidate
// until it gathers enough support for individual nodes to pass their thresholds and
// transition to processing blocks and deploys.
// Nodes should persist this value to be able to retrieve it later even if in case all nodes are restarted.
message GenesisCandidate {
    // The hash of the Genesis block, which should reflect the effects of executing
    // the block that was compiled according to the published specification.
    // The Genesis block is special in that it is not signed by any one validator:
    // all the signatures are going to be missing, all the public key fields empty,
    // including those that would sign the deploys in the body.
    bytes block_hash = 1;

    // Approvals from bonded validators with signatures over the `block_hash`.
    repeated Approval approvals = 2;
}


message Era {
    // Key block of the era, which is basically its identifier.
    bytes key_block_hash = 1;
    // Identifier of the parent era.
    bytes parent_key_block_hash = 2;
    // Number of ticks since Unix epoch (in the protocol specific units) when the era starts.
    uint64 start_tick = 3;
    // Last round of the era (non-inclusive), after which the first block is the switch block.
    uint64 end_tick = 4;
    // The hash of the booking block which was reachable from the key block;
    // this is where the bonds are coming, included in the era for reference.
    bytes booking_block_hash = 5;
    // The random seed compiled from the magic bits between the booking block and the key block.
    // 1. Concatenate all the magic bits into an array of bytes, padding on the right with 0s to make it divisble by 8.
    // 2. Concatenate the byte array to the parent leader seed.
    // 3. Let the leader_seed be the blake2b256 hash of the resulting array.
    // 4. Convert any uint64 tick to bytes in little-endian format.
    // 5. Concatentate the the bytes of the tick to the leader_seed and use the array as a seed to a SHA1PRNG generator.
    // 6. Generate a random double r between [0, 1) and seek the first validator in `bonds` where the total cumulative weight exceeds r * total.
    bytes leader_seed = 6;
    // Bonded validator weights from the booking block.
    repeated Bond bonds = 7;
}
